Multithreading:
Multithreading is a way to achieve Multitasking.
There are two types:
i) Process based multi tasking:
When each independent task is a seperate process then it is called a Process based multi tasking.
eg: downloading a file from browser and watching a movie are 2 seperate independet tasks.

ii) Thread based multi tasking:
In thread based multitasking same program contains several tasks means threads and each thread is seperate independent part of the program and all the task executing simultaneously.
eg: suppose there are 2000 lines of code in a program, first 1000 lines of code perform seperate task while other 1000 lines seperate, hence both can run simultaneously in a code.

Applications of Multithreading:
1. Development of video games
2. Development of animation
3. In multimedia graphics
4. Development of web and server.

When we should go for multithreading?
Whenever we have independent task in our program that means there is no dependency between the tasks then there is no need to execute that one in order wise.
Every program is an independent part.

Main Thread:
Every python program consists of a default thread called as Main thread.


Daemon Threads
There are two types od thread
1. Daemon Thread
2.Non daemon thread

The thread which is running in background are called Daemon thread
It provides support to non daemon thread i.e. Main thread

Whenever main thread runs into low memory, immpediately PVM(Python interpreter) runs Garbage Collector to f=destroy useless objects and to provide free memory, so that Main Thread can continue its execution without having any memory problems.

SYNCHRONIZATION:
In multi threading process when multiple threads/processes execute at the same time there might be a chance that multiple threads execute same statement, hence data inconsistency will happen so to overcome inconsistency, Synchronization is important in Python.


APPLICATION OF PYTHON SYNCHRONIZATION: Online Reservation System
How to implement synchronization in Python?
1.Lock
2.RLock
3.Semaphore


LOCK CONCEPT FOR SYNCHRONIZATION:
Threading module provide the lock concept and let's see how to create Lock object
eg: obj=Lock()

At a time only one thread held by lock object at the same time suppose if any other thread requires same Lock so this thread will have to wait until the previous thread release the lock
eg: queue in petrol pump, telephone booth

The acquire() method helps to acquire the Lock.
The release() method helps to release the Lock.
